[{"name":"annotation class InlineDsl","description":"nz.adjmunro.inline.InlineDsl","location":"inline/nz.adjmunro.inline/-inline-dsl/index.html","searchKeys":["InlineDsl","annotation class InlineDsl","nz.adjmunro.inline.InlineDsl"]},{"name":"infix inline fun <T : Any> T?.orElse(none: (NullPointerException) -> T = ::rethrow): T","description":"nz.adjmunro.inline.orElse","location":"inline/nz.adjmunro.inline/or-else.html","searchKeys":["orElse","infix inline fun <T : Any> T?.orElse(none: (NullPointerException) -> T = ::rethrow): T","nz.adjmunro.inline.orElse"]},{"name":"infix inline fun <T, R> T?.exists(block: T & Any.() -> R): R?","description":"nz.adjmunro.inline.exists","location":"inline/nz.adjmunro.inline/exists.html","searchKeys":["exists","infix inline fun <T, R> T?.exists(block: T & Any.() -> R): R?","nz.adjmunro.inline.exists"]},{"name":"inline fun <In, Out> In.boolfold(predicate: In.() -> Boolean, falsy: In.() -> Out, truthy: In.() -> Out): Out","description":"nz.adjmunro.inline.boolfold","location":"inline/nz.adjmunro.inline/boolfold.html","searchKeys":["boolfold","inline fun <In, Out> In.boolfold(predicate: In.() -> Boolean, falsy: In.() -> Out, truthy: In.() -> Out): Out","nz.adjmunro.inline.boolfold"]},{"name":"inline fun <In, Out> In.nullfold(none: (NullPointerException) -> Out, some: (In & Any) -> Out): Out","description":"nz.adjmunro.inline.nullfold","location":"inline/nz.adjmunro.inline/nullfold.html","searchKeys":["nullfold","inline fun <In, Out> In.nullfold(none: (NullPointerException) -> Out, some: (In & Any) -> Out): Out","nz.adjmunro.inline.nullfold"]},{"name":"inline fun <In, Out> In.throwfold(throws: (Throwable) -> Out, pass: (In) -> Out): Out","description":"nz.adjmunro.inline.throwfold","location":"inline/nz.adjmunro.inline/throwfold.html","searchKeys":["throwfold","inline fun <In, Out> In.throwfold(throws: (Throwable) -> Out, pass: (In) -> Out): Out","nz.adjmunro.inline.throwfold"]},{"name":"inline fun <Parent : Any, Child : Parent> Parent.on(instanceOf: KClass<Child>, block: Child.() -> Unit): Parent","description":"nz.adjmunro.inline.on","location":"inline/nz.adjmunro.inline/on.html","searchKeys":["on","inline fun <Parent : Any, Child : Parent> Parent.on(instanceOf: KClass<Child>, block: Child.() -> Unit): Parent","nz.adjmunro.inline.on"]},{"name":"inline fun <T, R> exists(receiver: T?, block: T & Any.() -> R): R?","description":"nz.adjmunro.inline.exists","location":"inline/nz.adjmunro.inline/exists.html","searchKeys":["exists","inline fun <T, R> exists(receiver: T?, block: T & Any.() -> R): R?","nz.adjmunro.inline.exists"]},{"name":"inline fun <T> Any.castOrThrow(): T","description":"nz.adjmunro.inline.castOrThrow","location":"inline/nz.adjmunro.inline/cast-or-throw.html","searchKeys":["castOrThrow","inline fun <T> Any.castOrThrow(): T","nz.adjmunro.inline.castOrThrow"]},{"name":"inline fun <T> Any?.castOrElse(default: () -> T): T","description":"nz.adjmunro.inline.castOrElse","location":"inline/nz.adjmunro.inline/cast-or-else.html","searchKeys":["castOrElse","inline fun <T> Any?.castOrElse(default: () -> T): T","nz.adjmunro.inline.castOrElse"]},{"name":"inline fun <T> Any?.castOrNull(): T?","description":"nz.adjmunro.inline.castOrNull","location":"inline/nz.adjmunro.inline/cast-or-null.html","searchKeys":["castOrNull","inline fun <T> Any?.castOrNull(): T?","nz.adjmunro.inline.castOrNull"]},{"name":"inline fun <T> Any?.instanceOf(): Boolean","description":"nz.adjmunro.inline.instanceOf","location":"inline/nz.adjmunro.inline/instance-of.html","searchKeys":["instanceOf","inline fun <T> Any?.instanceOf(): Boolean","nz.adjmunro.inline.instanceOf"]},{"name":"inline fun <T> T.caller(ignore: Any? = null): T","description":"nz.adjmunro.inline.caller","location":"inline/nz.adjmunro.inline/caller.html","searchKeys":["caller","inline fun <T> T.caller(ignore: Any? = null): T","nz.adjmunro.inline.caller"]},{"name":"inline fun <T> T.flatmap(predicate: T.() -> Boolean, falsy: T.() -> T = ::caller, truthy: T.() -> T = ::caller): T","description":"nz.adjmunro.inline.flatmap","location":"inline/nz.adjmunro.inline/flatmap.html","searchKeys":["flatmap","inline fun <T> T.flatmap(predicate: T.() -> Boolean, falsy: T.() -> T = ::caller, truthy: T.() -> T = ::caller): T","nz.adjmunro.inline.flatmap"]},{"name":"inline fun <T> T.stringCaller(ignore: Any? = null): String","description":"nz.adjmunro.inline.stringCaller","location":"inline/nz.adjmunro.inline/string-caller.html","searchKeys":["stringCaller","inline fun <T> T.stringCaller(ignore: Any? = null): String","nz.adjmunro.inline.stringCaller"]},{"name":"inline fun <T> itself(value: T): T","description":"nz.adjmunro.inline.itself","location":"inline/nz.adjmunro.inline/itself.html","searchKeys":["itself","inline fun <T> itself(value: T): T","nz.adjmunro.inline.itself"]},{"name":"inline fun <T> stringItself(value: T): String","description":"nz.adjmunro.inline.stringItself","location":"inline/nz.adjmunro.inline/string-itself.html","searchKeys":["stringItself","inline fun <T> stringItself(value: T): String","nz.adjmunro.inline.stringItself"]},{"name":"inline fun String?.orNull(): String?","description":"nz.adjmunro.inline.orNull","location":"inline/nz.adjmunro.inline/or-null.html","searchKeys":["orNull","inline fun String?.orNull(): String?","nz.adjmunro.inline.orNull"]},{"name":"inline fun emptyString(ignore: Any? = null): String","description":"nz.adjmunro.inline.emptyString","location":"inline/nz.adjmunro.inline/empty-string.html","searchKeys":["emptyString","inline fun emptyString(ignore: Any? = null): String","nz.adjmunro.inline.emptyString"]},{"name":"inline fun falsehood(ignore: Any? = null): Boolean","description":"nz.adjmunro.inline.falsehood","location":"inline/nz.adjmunro.inline/falsehood.html","searchKeys":["falsehood","inline fun falsehood(ignore: Any? = null): Boolean","nz.adjmunro.inline.falsehood"]},{"name":"inline fun nulls(ignore: Any? = null): Nothing?","description":"nz.adjmunro.inline.nulls","location":"inline/nz.adjmunro.inline/nulls.html","searchKeys":["nulls","inline fun nulls(ignore: Any? = null): Nothing?","nz.adjmunro.inline.nulls"]},{"name":"inline fun rethrow(throwable: Throwable): Nothing","description":"nz.adjmunro.inline.rethrow","location":"inline/nz.adjmunro.inline/rethrow.html","searchKeys":["rethrow","inline fun rethrow(throwable: Throwable): Nothing","nz.adjmunro.inline.rethrow"]},{"name":"inline fun truth(ignore: Any? = null): Boolean","description":"nz.adjmunro.inline.truth","location":"inline/nz.adjmunro.inline/truth.html","searchKeys":["truth","inline fun truth(ignore: Any? = null): Boolean","nz.adjmunro.inline.truth"]},{"name":"inline fun unit(ignore: Any? = null)","description":"nz.adjmunro.inline.unit","location":"inline/nz.adjmunro.inline/unit.html","searchKeys":["unit","inline fun unit(ignore: Any? = null)","nz.adjmunro.inline.unit"]}]