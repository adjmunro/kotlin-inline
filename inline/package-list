$dokka.format:html-v1
$dokka.linkExtension:html
$dokka.location:nz.adjmunro.inline////PointingToDeclaration/inline/nz.adjmunro.inline/index.html
$dokka.location:nz.adjmunro.inline//boolfold/TypeParam(bounds=[kotlin.Any?])#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),kotlin.Boolean]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/inline/nz.adjmunro.inline/boolfold.html
$dokka.location:nz.adjmunro.inline//caller/TypeParam(bounds=[kotlin.Any?])#kotlin.Any?/PointingToDeclaration/inline/nz.adjmunro.inline/caller.html
$dokka.location:nz.adjmunro.inline//castOrElse/kotlin.Any?#kotlin.Function0[TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/inline/nz.adjmunro.inline/cast-or-else.html
$dokka.location:nz.adjmunro.inline//castOrNull/kotlin.Any?#/PointingToDeclaration/inline/nz.adjmunro.inline/cast-or-null.html
$dokka.location:nz.adjmunro.inline//castOrThrow/kotlin.Any#/PointingToDeclaration/inline/nz.adjmunro.inline/cast-or-throw.html
$dokka.location:nz.adjmunro.inline//emptyString/#kotlin.Any?/PointingToDeclaration/inline/nz.adjmunro.inline/empty-string.html
$dokka.location:nz.adjmunro.inline//exists/#TypeParam(bounds=[kotlin.Any?])?#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/inline/nz.adjmunro.inline/exists.html
$dokka.location:nz.adjmunro.inline//exists/TypeParam(bounds=[kotlin.Any?])?#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/inline/nz.adjmunro.inline/exists.html
$dokka.location:nz.adjmunro.inline//falsehood/#kotlin.Any?/PointingToDeclaration/inline/nz.adjmunro.inline/falsehood.html
$dokka.location:nz.adjmunro.inline//flatmap/TypeParam(bounds=[kotlin.Any?])#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),kotlin.Boolean]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/inline/nz.adjmunro.inline/flatmap.html
$dokka.location:nz.adjmunro.inline//instanceOf/kotlin.Any?#/PointingToDeclaration/inline/nz.adjmunro.inline/instance-of.html
$dokka.location:nz.adjmunro.inline//itself/#TypeParam(bounds=[kotlin.Any?])/PointingToDeclaration/inline/nz.adjmunro.inline/itself.html
$dokka.location:nz.adjmunro.inline//nullfold/TypeParam(bounds=[kotlin.Any?])#kotlin.Function1[kotlin.NullPointerException,TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/inline/nz.adjmunro.inline/nullfold.html
$dokka.location:nz.adjmunro.inline//nulls/#kotlin.Any?/PointingToDeclaration/inline/nz.adjmunro.inline/nulls.html
$dokka.location:nz.adjmunro.inline//on/TypeParam(bounds=[kotlin.Any])#kotlin.reflect.KClass[TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])])]#kotlin.Function1[TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])]),kotlin.Unit]/PointingToDeclaration/inline/nz.adjmunro.inline/on.html
$dokka.location:nz.adjmunro.inline//orElse/TypeParam(bounds=[kotlin.Any])?#kotlin.Function1[kotlin.NullPointerException,TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/inline/nz.adjmunro.inline/or-else.html
$dokka.location:nz.adjmunro.inline//orNull/kotlin.String?#/PointingToDeclaration/inline/nz.adjmunro.inline/or-null.html
$dokka.location:nz.adjmunro.inline//parallelMap/kotlin.collections.Iterable[TypeParam(bounds=[kotlin.Any?])]#kotlin.coroutines.SuspendFunction2[kotlinx.coroutines.CoroutineScope,TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/inline/nz.adjmunro.inline/parallel-map.html
$dokka.location:nz.adjmunro.inline//parallelMap/kotlin.sequences.Sequence[TypeParam(bounds=[kotlin.Any?])]#kotlin.coroutines.SuspendFunction2[kotlinx.coroutines.CoroutineScope,TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/inline/nz.adjmunro.inline/parallel-map.html
$dokka.location:nz.adjmunro.inline//rethrow/#kotlin.Throwable/PointingToDeclaration/inline/nz.adjmunro.inline/rethrow.html
$dokka.location:nz.adjmunro.inline//stringCaller/TypeParam(bounds=[kotlin.Any?])#kotlin.Any?/PointingToDeclaration/inline/nz.adjmunro.inline/string-caller.html
$dokka.location:nz.adjmunro.inline//stringItself/#TypeParam(bounds=[kotlin.Any?])/PointingToDeclaration/inline/nz.adjmunro.inline/string-itself.html
$dokka.location:nz.adjmunro.inline//throwfold/TypeParam(bounds=[kotlin.Any?])#kotlin.Function1[kotlin.Throwable,TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/inline/nz.adjmunro.inline/throwfold.html
$dokka.location:nz.adjmunro.inline//truth/#kotlin.Any?/PointingToDeclaration/inline/nz.adjmunro.inline/truth.html
$dokka.location:nz.adjmunro.inline//unit/#kotlin.Any?/PointingToDeclaration/inline/nz.adjmunro.inline/unit.html
nz.adjmunro.inline
